/**
 * Musement API
 * Musmement API
 *
 * OpenAPI spec version: 3.2.0
 * Contact: api-support@musement.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/City', 'model/CityAggregated', 'model/Event', 'model/MusementList', 'model/Vertical'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/City'), require('../model/CityAggregated'), require('../model/Event'), require('../model/MusementList'), require('../model/Vertical'));
  } else {
    // Browser globals (root is window)
    if (!root.MusementApi) {
      root.MusementApi = {};
    }
    root.MusementApi.CityApi = factory(root.MusementApi.ApiClient, root.MusementApi.City, root.MusementApi.CityAggregated, root.MusementApi.Event, root.MusementApi.MusementList, root.MusementApi.Vertical);
  }
}(this, function(ApiClient, City, CityAggregated, Event, MusementList, Vertical) {
  'use strict';

  /**
   * City service.
   * @module api/CityApi
   * @version 3.2.0
   */

  /**
   * Constructs a new CityApi. 
   * @alias module:api/CityApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the citiesCityIdBlogpostsGet operation.
     * @callback module:api/CityApi~citiesCityIdBlogpostsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the blogposts for the city
     * @param {Number} cityId City identifier
     * @param {module:api/CityApi~citiesCityIdBlogpostsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.citiesCityIdBlogpostsGet = function(cityId, callback) {
      var postBody = null;

      // verify the required parameter 'cityId' is set
      if (cityId == undefined || cityId == null) {
        throw new Error("Missing the required parameter 'cityId' when calling citiesCityIdBlogpostsGet");
      }


      var pathParams = {
        'cityId': cityId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cities/{cityId}/blogposts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the citiesCityIdCategoriesGet operation.
     * @callback module:api/CityApi~citiesCityIdCategoriesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Categories for the city. Sorted by the number of events for the category
     * @param {Number} cityId City identifier
     * @param {module:api/CityApi~citiesCityIdCategoriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.citiesCityIdCategoriesGet = function(cityId, callback) {
      var postBody = null;

      // verify the required parameter 'cityId' is set
      if (cityId == undefined || cityId == null) {
        throw new Error("Missing the required parameter 'cityId' when calling citiesCityIdCategoriesGet");
      }


      var pathParams = {
        'cityId': cityId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cities/{cityId}/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the citiesCityIdEventsGet operation.
     * @callback module:api/CityApi~citiesCityIdEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all verticals for a city
     * Get all events for an city. Only the events that have at least one active date in the period specified between date_from and date_to are returned. If date_from and date_to are not set then the period that will be set will be one year from the date of the request&#39;
     * @param {Number} cityId City identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.vertical Vertical identifier
     * @param {Number} opts.category Category identifier
     * @param {Number} opts.venue Venue identifier
     * @param {Number} opts.editorialCategory Editorial category identifier
     * @param {String} opts.dateFrom Start date | Use format: YYYY-MM-DD
     * @param {String} opts.dateTo To date | Use format: YYYY-MM-DD
     * @param {Number} opts.offset Pagination offset (default to 0)
     * @param {Number} opts.limit Max number of items in the response (default to 10)
     * @param {module:model/String} opts.sortBy Sorting strategy (default to venue-relevance)
     * @param {module:api/CityApi~citiesCityIdEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.citiesCityIdEventsGet = function(cityId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'cityId' is set
      if (cityId == undefined || cityId == null) {
        throw new Error("Missing the required parameter 'cityId' when calling citiesCityIdEventsGet");
      }


      var pathParams = {
        'cityId': cityId
      };
      var queryParams = {
        'vertical': opts['vertical'],
        'category': opts['category'],
        'venue': opts['venue'],
        'editorial-category': opts['editorialCategory'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort_by': opts['sortBy']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/cities/{cityId}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the citiesCityIdEventsHappeningGet operation.
     * @callback module:api/CityApi~citiesCityIdEventsHappeningGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get events
     * @param {Number} cityId City identifier
     * @param {module:model/String} happening Events for today or tomorrow ?
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Pagination offset (default to 0)
     * @param {Number} opts.limit Max number of items in the response (default to 10)
     * @param {module:api/CityApi~citiesCityIdEventsHappeningGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.citiesCityIdEventsHappeningGet = function(cityId, happening, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'cityId' is set
      if (cityId == undefined || cityId == null) {
        throw new Error("Missing the required parameter 'cityId' when calling citiesCityIdEventsHappeningGet");
      }

      // verify the required parameter 'happening' is set
      if (happening == undefined || happening == null) {
        throw new Error("Missing the required parameter 'happening' when calling citiesCityIdEventsHappeningGet");
      }


      var pathParams = {
        'cityId': cityId,
        'happening': happening
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/cities/{cityId}/events/{happening}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the citiesCityIdGet operation.
     * @callback module:api/CityApi~citiesCityIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/City} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get city by unique identifier
     * @param {Number} cityId City identifier
     * @param {module:api/CityApi~citiesCityIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/City}
     */
    this.citiesCityIdGet = function(cityId, callback) {
      var postBody = null;

      // verify the required parameter 'cityId' is set
      if (cityId == undefined || cityId == null) {
        throw new Error("Missing the required parameter 'cityId' when calling citiesCityIdGet");
      }


      var pathParams = {
        'cityId': cityId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = City;

      return this.apiClient.callApi(
        '/cities/{cityId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the citiesCityIdListsGet operation.
     * @callback module:api/CityApi~citiesCityIdListsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/MusementList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get lists for a city
     * @param {Number} cityId City identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Pagination offset (default to 0)
     * @param {Number} opts.limit Max number of items in the response (default to 10)
     * @param {module:model/String} opts.sortBy Set sorting strategy (default to weight)
     * @param {module:model/String} opts.withoutEvents Set to &#39;yes&#39; return all cities otherwise only those with events (default to no)
     * @param {Array.<String>} opts.tag List tags to filter by
     * @param {Array.<String>} opts.listTypes List type to filter by
     * @param {module:api/CityApi~citiesCityIdListsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/MusementList>}
     */
    this.citiesCityIdListsGet = function(cityId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'cityId' is set
      if (cityId == undefined || cityId == null) {
        throw new Error("Missing the required parameter 'cityId' when calling citiesCityIdListsGet");
      }


      var pathParams = {
        'cityId': cityId
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort_by': opts['sortBy'],
        'without_events': opts['withoutEvents'],
        'tag': this.apiClient.buildCollectionParam(opts['tag'], 'multi'),
        'list-types': this.apiClient.buildCollectionParam(opts['listTypes'], 'multi')
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [MusementList];

      return this.apiClient.callApi(
        '/cities/{cityId}/lists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the citiesCityIdVerticalsGet operation.
     * @callback module:api/CityApi~citiesCityIdVerticalsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Vertical>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all verticals for a city
     * @param {Number} cityId City identifier
     * @param {module:api/CityApi~citiesCityIdVerticalsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Vertical>}
     */
    this.citiesCityIdVerticalsGet = function(cityId, callback) {
      var postBody = null;

      // verify the required parameter 'cityId' is set
      if (cityId == undefined || cityId == null) {
        throw new Error("Missing the required parameter 'cityId' when calling citiesCityIdVerticalsGet");
      }


      var pathParams = {
        'cityId': cityId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [Vertical];

      return this.apiClient.callApi(
        '/cities/{cityId}/verticals', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the citiesGet operation.
     * @callback module:api/CityApi~citiesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CityAggregated>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get cities
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Pagination offset (default to 0)
     * @param {Number} opts.limit Max number of items in the response (default to 10)
     * @param {Number} opts.prioritizedCountry Set the country to prioritize (id) (will affect results order)
     * @param {Number} opts.prioritizedCountryCitiesLimit Set the number of cities to select from the country given in prioritized_country, if not given means unlimited
     * @param {module:model/String} opts.sortBy Set sorting strategy (default to weight)
     * @param {module:model/String} opts.withoutEvents Set to &#39;yes&#39; return all cities otherwise only those with events (default to no)
     * @param {module:api/CityApi~citiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CityAggregated>}
     */
    this.citiesGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'prioritized_country': opts['prioritizedCountry'],
        'prioritized_country_cities_limit': opts['prioritizedCountryCitiesLimit'],
        'sort_by': opts['sortBy'],
        'without_events': opts['withoutEvents']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [CityAggregated];

      return this.apiClient.callApi(
        '/cities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the countriesCountryIdCitiesGet operation.
     * @callback module:api/CityApi~countriesCountryIdCitiesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CityAggregated>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all cities for a country
     * @param {Number} countryId Country identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Pagination offset (default to 0)
     * @param {Number} opts.limit Max number of items in the response (default to 10)
     * @param {module:api/CityApi~countriesCountryIdCitiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CityAggregated>}
     */
    this.countriesCountryIdCitiesGet = function(countryId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'countryId' is set
      if (countryId == undefined || countryId == null) {
        throw new Error("Missing the required parameter 'countryId' when calling countriesCountryIdCitiesGet");
      }


      var pathParams = {
        'countryId': countryId
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [CityAggregated];

      return this.apiClient.callApi(
        '/countries/{countryId}/cities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
