/**
 * Musement API
 * Musmement API
 *
 * OpenAPI spec version: 3.2.0
 * Contact: api-support@musement.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ActivityContent', 'model/Bundle', 'model/Category', 'model/Comment', 'model/Event', 'model/FeedbackRequest', 'model/GalleryMedia', 'model/GiftSchedule', 'model/ModelDate', 'model/Schedule', 'model/SearchResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ActivityContent'), require('../model/Bundle'), require('../model/Category'), require('../model/Comment'), require('../model/Event'), require('../model/FeedbackRequest'), require('../model/GalleryMedia'), require('../model/GiftSchedule'), require('../model/ModelDate'), require('../model/Schedule'), require('../model/SearchResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.MusementApi) {
      root.MusementApi = {};
    }
    root.MusementApi.EventApi = factory(root.MusementApi.ApiClient, root.MusementApi.ActivityContent, root.MusementApi.Bundle, root.MusementApi.Category, root.MusementApi.Comment, root.MusementApi.Event, root.MusementApi.FeedbackRequest, root.MusementApi.GalleryMedia, root.MusementApi.GiftSchedule, root.MusementApi.ModelDate, root.MusementApi.Schedule, root.MusementApi.SearchResponse);
  }
}(this, function(ApiClient, ActivityContent, Bundle, Category, Comment, Event, FeedbackRequest, GalleryMedia, GiftSchedule, ModelDate, Schedule, SearchResponse) {
  'use strict';

  /**
   * Event service.
   * @module api/EventApi
   * @version 3.2.0
   */

  /**
   * Constructs a new EventApi. 
   * @alias module:api/EventApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the activitiesActivityUuidContentsLocaleCodeGet operation.
     * @callback module:api/EventApi~activitiesActivityUuidContentsLocaleCodeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActivityContent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get activity content for a specific locale
     * @param {String} activityUuid Activity identifier
     * @param {String} localeCode Locale code
     * @param {module:api/EventApi~activitiesActivityUuidContentsLocaleCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActivityContent}
     */
    this.activitiesActivityUuidContentsLocaleCodeGet = function(activityUuid, localeCode, callback) {
      var postBody = null;

      // verify the required parameter 'activityUuid' is set
      if (activityUuid == undefined || activityUuid == null) {
        throw new Error("Missing the required parameter 'activityUuid' when calling activitiesActivityUuidContentsLocaleCodeGet");
      }

      // verify the required parameter 'localeCode' is set
      if (localeCode == undefined || localeCode == null) {
        throw new Error("Missing the required parameter 'localeCode' when calling activitiesActivityUuidContentsLocaleCodeGet");
      }


      var pathParams = {
        'activityUuid': activityUuid,
        'localeCode': localeCode
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = ActivityContent;

      return this.apiClient.callApi(
        '/activities/{activityUuid}/contents/{localeCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the categoriesCategoryIdEventsGet operation.
     * @callback module:api/EventApi~categoriesCategoryIdEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get events for a category sorted by category relevance.
     * Get all events for a category sorted by category relevance. Only the events that have at least one active date in the period specified between date_from and date_to are returned. If date_from and date_to are not set then the period that will be set will be one year from the date of the request&#39;
     * @param {Number} categoryId Category identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.vertical Vertical identifier
     * @param {Number} opts.city City identifier
     * @param {Number} opts.venue Venue identifier
     * @param {Number} opts.editorialCategory Editorial category identifier
     * @param {String} opts.dateFrom Start date | Use format: YYYY-MM-DD
     * @param {String} opts.dateTo To date | Use format: YYYY-MM-DD
     * @param {Number} opts.offset Pagination offset (default to 0)
     * @param {Number} opts.limit Max number of items in the response (default to 10)
     * @param {module:model/String} opts.sortBy Sorting strategy (default to venue-relevance)
     * @param {module:api/EventApi~categoriesCategoryIdEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.categoriesCategoryIdEventsGet = function(categoryId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'categoryId' is set
      if (categoryId == undefined || categoryId == null) {
        throw new Error("Missing the required parameter 'categoryId' when calling categoriesCategoryIdEventsGet");
      }


      var pathParams = {
        'categoryId': categoryId
      };
      var queryParams = {
        'vertical': opts['vertical'],
        'city': opts['city'],
        'venue': opts['venue'],
        'editorial-category': opts['editorialCategory'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort_by': opts['sortBy']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/categories/{categoryId}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the citiesCityIdEventsGet operation.
     * @callback module:api/EventApi~citiesCityIdEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all verticals for a city
     * Get all events for an city. Only the events that have at least one active date in the period specified between date_from and date_to are returned. If date_from and date_to are not set then the period that will be set will be one year from the date of the request&#39;
     * @param {Number} cityId City identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.vertical Vertical identifier
     * @param {Number} opts.category Category identifier
     * @param {Number} opts.venue Venue identifier
     * @param {Number} opts.editorialCategory Editorial category identifier
     * @param {String} opts.dateFrom Start date | Use format: YYYY-MM-DD
     * @param {String} opts.dateTo To date | Use format: YYYY-MM-DD
     * @param {Number} opts.offset Pagination offset (default to 0)
     * @param {Number} opts.limit Max number of items in the response (default to 10)
     * @param {module:model/String} opts.sortBy Sorting strategy (default to venue-relevance)
     * @param {module:api/EventApi~citiesCityIdEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.citiesCityIdEventsGet = function(cityId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'cityId' is set
      if (cityId == undefined || cityId == null) {
        throw new Error("Missing the required parameter 'cityId' when calling citiesCityIdEventsGet");
      }


      var pathParams = {
        'cityId': cityId
      };
      var queryParams = {
        'vertical': opts['vertical'],
        'category': opts['category'],
        'venue': opts['venue'],
        'editorial-category': opts['editorialCategory'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort_by': opts['sortBy']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/cities/{cityId}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the citiesCityIdEventsHappeningGet operation.
     * @callback module:api/EventApi~citiesCityIdEventsHappeningGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get events
     * @param {Number} cityId City identifier
     * @param {module:model/String} happening Events for today or tomorrow ?
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Pagination offset (default to 0)
     * @param {Number} opts.limit Max number of items in the response (default to 10)
     * @param {module:api/EventApi~citiesCityIdEventsHappeningGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.citiesCityIdEventsHappeningGet = function(cityId, happening, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'cityId' is set
      if (cityId == undefined || cityId == null) {
        throw new Error("Missing the required parameter 'cityId' when calling citiesCityIdEventsHappeningGet");
      }

      // verify the required parameter 'happening' is set
      if (happening == undefined || happening == null) {
        throw new Error("Missing the required parameter 'happening' when calling citiesCityIdEventsHappeningGet");
      }


      var pathParams = {
        'cityId': cityId,
        'happening': happening
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/cities/{cityId}/events/{happening}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the editorialCategoriesEditorialcategoryIdEventsGet operation.
     * @callback module:api/EventApi~editorialCategoriesEditorialcategoryIdEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all events for an editorial category sorted by event relevance.
     * Get all events for an editorial category sorted by relevance. Only the events that have at least one active date in the period specified between date_from and date_to are returned. If date_from and date_to are not set then the period that will be set will be one year from the date of the request&#39;
     * @param {Number} editorialcategoryId Editorial category identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.vertical Vertical identifier
     * @param {Number} opts.city City identifier
     * @param {Number} opts.category Category identifier
     * @param {Number} opts.venue Venue identifier
     * @param {String} opts.dateFrom Start date | Use format: YYYY-MM-DD
     * @param {String} opts.dateTo To date | Use format: YYYY-MM-DD
     * @param {Number} opts.offset Pagination offset (default to 0)
     * @param {Number} opts.limit Max number of items in the response (default to 10)
     * @param {module:model/String} opts.sortBy Sorting strategy (default to relevance)
     * @param {module:api/EventApi~editorialCategoriesEditorialcategoryIdEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.editorialCategoriesEditorialcategoryIdEventsGet = function(editorialcategoryId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'editorialcategoryId' is set
      if (editorialcategoryId == undefined || editorialcategoryId == null) {
        throw new Error("Missing the required parameter 'editorialcategoryId' when calling editorialCategoriesEditorialcategoryIdEventsGet");
      }


      var pathParams = {
        'editorialcategoryId': editorialcategoryId
      };
      var queryParams = {
        'vertical': opts['vertical'],
        'city': opts['city'],
        'category': opts['category'],
        'venue': opts['venue'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort_by': opts['sortBy']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/editorial-categories/{editorialcategoryId}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsEventIdBundlesGet operation.
     * @callback module:api/EventApi~eventsEventIdBundlesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get bundles related to an event
     * @param {Number} eventId Event identifier
     * @param {module:api/EventApi~eventsEventIdBundlesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bundle}
     */
    this.eventsEventIdBundlesGet = function(eventId, callback) {
      var postBody = null;

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventsEventIdBundlesGet");
      }


      var pathParams = {
        'eventId': eventId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Bundle;

      return this.apiClient.callApi(
        '/events/{eventId}/bundles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsEventIdCommentsGet operation.
     * @callback module:api/EventApi~eventsEventIdCommentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Comment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get comments for an event
     * @param {Number} eventId Event identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Pagination offset (default to 0)
     * @param {Number} opts.limit Max number of items in the response (default to 10)
     * @param {String} opts.locale Set first comment in this language
     * @param {module:api/EventApi~eventsEventIdCommentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Comment>}
     */
    this.eventsEventIdCommentsGet = function(eventId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventsEventIdCommentsGet");
      }


      var pathParams = {
        'eventId': eventId
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'locale': opts['locale']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [Comment];

      return this.apiClient.callApi(
        '/events/{eventId}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsEventIdContactFormGet operation.
     * @callback module:api/EventApi~eventsEventIdContactFormGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Category} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Event contact form
     * @param {Number} eventId Event identifier
     * @param {module:api/EventApi~eventsEventIdContactFormGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Category}
     */
    this.eventsEventIdContactFormGet = function(eventId, callback) {
      var postBody = null;

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventsEventIdContactFormGet");
      }


      var pathParams = {
        'eventId': eventId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Category;

      return this.apiClient.callApi(
        '/events/{eventId}/contact-form', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsEventIdContactRequestsPost operation.
     * @callback module:api/EventApi~eventsEventIdContactRequestsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send a contact request with submitted data.
     * @param {Number} eventId Event identifier
     * @param {module:api/EventApi~eventsEventIdContactRequestsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.eventsEventIdContactRequestsPost = function(eventId, callback) {
      var postBody = null;

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventsEventIdContactRequestsPost");
      }


      var pathParams = {
        'eventId': eventId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/events/{eventId}/contact-requests', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsEventIdDatesGet operation.
     * @callback module:api/EventApi~eventsEventIdDatesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelDate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available dates for an event
     * @param {Number} eventId Event identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.dateFrom Start date | If not specified set to today | Use format: YYYY-MM-DD
     * @param {String} opts.dateTo To date | If not specified set to next year | Use format: YYYY-MM-DD
     * @param {module:api/EventApi~eventsEventIdDatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelDate}
     */
    this.eventsEventIdDatesGet = function(eventId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventsEventIdDatesGet");
      }


      var pathParams = {
        'eventId': eventId
      };
      var queryParams = {
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = ModelDate;

      return this.apiClient.callApi(
        '/events/{eventId}/dates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsEventIdGet operation.
     * @callback module:api/EventApi~eventsEventIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get event by unique identifier
     * @param {Number} eventId Event identifier
     * @param {module:api/EventApi~eventsEventIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Event}
     */
    this.eventsEventIdGet = function(eventId, callback) {
      var postBody = null;

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventsEventIdGet");
      }


      var pathParams = {
        'eventId': eventId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Event;

      return this.apiClient.callApi(
        '/events/{eventId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsEventIdGiftScheduleGet operation.
     * @callback module:api/EventApi~eventsEventIdGiftScheduleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GiftSchedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get schedule for a &#39;Gift creation&#39; for an Event
     * @param {Number} eventId Event identifier
     * @param {module:api/EventApi~eventsEventIdGiftScheduleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GiftSchedule}
     */
    this.eventsEventIdGiftScheduleGet = function(eventId, callback) {
      var postBody = null;

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventsEventIdGiftScheduleGet");
      }


      var pathParams = {
        'eventId': eventId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = GiftSchedule;

      return this.apiClient.callApi(
        '/events/{eventId}/gift-schedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsEventIdMediaGet operation.
     * @callback module:api/EventApi~eventsEventIdMediaGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GalleryMedia>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all media for an event
     * @param {Number} eventId Event identifier
     * @param {module:api/EventApi~eventsEventIdMediaGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GalleryMedia>}
     */
    this.eventsEventIdMediaGet = function(eventId, callback) {
      var postBody = null;

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventsEventIdMediaGet");
      }


      var pathParams = {
        'eventId': eventId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [GalleryMedia];

      return this.apiClient.callApi(
        '/events/{eventId}/media', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsEventIdScheduleDayGet operation.
     * @callback module:api/EventApi~eventsEventIdScheduleDayGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Schedule>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get schedule for a day for an event
     * @param {Number} eventId Event identifier
     * @param {String} day Day | Use format: YYYY-MM-DD
     * @param {Object} opts Optional parameters
     * @param {String} opts.ticketsNumber Number of ticket requested tickets |Only useful for real time events
     * @param {module:api/EventApi~eventsEventIdScheduleDayGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Schedule>}
     */
    this.eventsEventIdScheduleDayGet = function(eventId, day, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventsEventIdScheduleDayGet");
      }

      // verify the required parameter 'day' is set
      if (day == undefined || day == null) {
        throw new Error("Missing the required parameter 'day' when calling eventsEventIdScheduleDayGet");
      }


      var pathParams = {
        'eventId': eventId,
        'day': day
      };
      var queryParams = {
        'ticketsNumber': opts['ticketsNumber']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [Schedule];

      return this.apiClient.callApi(
        '/events/{eventId}/schedule/{day}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsEventIdScheduleDayGiftCodeGet operation.
     * @callback module:api/EventApi~eventsEventIdScheduleDayGiftCodeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Schedule>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get schedule for Gift and specific day
     * @param {Number} eventId Event identifier
     * @param {String} day Day | Use format: YYYY-MM-DD
     * @param {String} giftCode Gift code
     * @param {module:api/EventApi~eventsEventIdScheduleDayGiftCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Schedule>}
     */
    this.eventsEventIdScheduleDayGiftCodeGet = function(eventId, day, giftCode, callback) {
      var postBody = null;

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventsEventIdScheduleDayGiftCodeGet");
      }

      // verify the required parameter 'day' is set
      if (day == undefined || day == null) {
        throw new Error("Missing the required parameter 'day' when calling eventsEventIdScheduleDayGiftCodeGet");
      }

      // verify the required parameter 'giftCode' is set
      if (giftCode == undefined || giftCode == null) {
        throw new Error("Missing the required parameter 'giftCode' when calling eventsEventIdScheduleDayGiftCodeGet");
      }


      var pathParams = {
        'eventId': eventId,
        'day': day,
        'giftCode': giftCode
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [Schedule];

      return this.apiClient.callApi(
        '/events/{eventId}/schedule/{day}/{giftCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsGet operation.
     * @callback module:api/EventApi~eventsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get events
     * @param {Object} opts Optional parameters
     * @param {Array.<Number>} opts.ids Given events will always be returned (will not help achieve the limit quota)
     * @param {Number} opts.limit Limit quota of events to return
     * @param {Number} opts.page Page from which starting to return found events (mandatory if limit is given)
     * @param {Number} opts.offset Offset from which starting to return found events (mandatory if limit is given cannot be used within the page parameter)
     * @param {Array.<Number>} opts.countryIn Filter, include only results from given counties identified by a collection of ids
     * @param {Array.<Number>} opts.notCountryIn Filter, exclude results from given counties identified by a collection of ids
     * @param {Array.<Number>} opts.cityIn Filter, include only results from given cities identified by a collection of ids
     * @param {Array.<Number>} opts.notCityIn Filter, exclude results from given cities identified by a collection of ids
     * @param {Boolean} opts.active Filter, include results on an activation status basis
     * @param {Boolean} opts.temporary Filter, include results on an temporary flag basis
     * @param {String} opts.sortBy Ordering criteria: [relevance|city_relevance], prepend &#x60;-&#x60; for descending order
     * @param {module:api/EventApi~eventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.eventsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'ids': this.apiClient.buildCollectionParam(opts['ids'], 'multi'),
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'country_in': this.apiClient.buildCollectionParam(opts['countryIn'], 'multi'),
        'not_country_in': this.apiClient.buildCollectionParam(opts['notCountryIn'], 'multi'),
        'city_in': this.apiClient.buildCollectionParam(opts['cityIn'], 'multi'),
        'not_city_in': this.apiClient.buildCollectionParam(opts['notCityIn'], 'multi'),
        'active': opts['active'],
        'temporary': opts['temporary'],
        'sort_by': opts['sortBy']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsSearchExtendedGet operation.
     * @callback module:api/EventApi~eventsSearchExtendedGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * API for search
     * @param {Object} opts Optional parameters
     * @param {String} opts.q Query String
     * @param {Number} opts.offset Pagination offset (default to 0)
     * @param {Number} opts.limit Max number of items in the response (default to 10)
     * @param {String} opts.dateFrom Start date | Use format: YYYY-MM-DD
     * @param {String} opts.dateTo To date | Use format: YYYY-MM-DD
     * @param {Array.<String>} opts.verticalCollection List of verticals comma separated
     * @param {Array.<String>} opts.categoryCollection List of categories comma separated
     * @param {Array.<String>} opts.countryCollection List of countries comma separated
     * @param {Array.<String>} opts.cityCollection List of cities comma separated
     * @param {String} opts.minPrice Minimum price for an event to be considered
     * @param {String} opts.maxPrice Maximum price for an event to be considered
     * @param {String} opts.topFeature Query String
     * @param {module:model/String} opts.sorting Sorting strategy (default to relevance)
     * @param {module:api/EventApi~eventsSearchExtendedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchResponse}
     */
    this.eventsSearchExtendedGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'q': opts['q'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'vertical_collection': this.apiClient.buildCollectionParam(opts['verticalCollection'], 'csv'),
        'category_collection': this.apiClient.buildCollectionParam(opts['categoryCollection'], 'csv'),
        'country_collection': this.apiClient.buildCollectionParam(opts['countryCollection'], 'csv'),
        'city_collection': this.apiClient.buildCollectionParam(opts['cityCollection'], 'csv'),
        'minPrice': opts['minPrice'],
        'maxPrice': opts['maxPrice'],
        'topFeature': opts['topFeature'],
        'sorting': opts['sorting']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = SearchResponse;

      return this.apiClient.callApi(
        '/events/search-extended', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the feedbackRequestsFeedbackRequestNonceGet operation.
     * @callback module:api/EventApi~feedbackRequestsFeedbackRequestNonceGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeedbackRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get feedback request details
     * @param {String} feedbackRequestNonce Feedback request nonce
     * @param {module:api/EventApi~feedbackRequestsFeedbackRequestNonceGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeedbackRequest}
     */
    this.feedbackRequestsFeedbackRequestNonceGet = function(feedbackRequestNonce, callback) {
      var postBody = null;

      // verify the required parameter 'feedbackRequestNonce' is set
      if (feedbackRequestNonce == undefined || feedbackRequestNonce == null) {
        throw new Error("Missing the required parameter 'feedbackRequestNonce' when calling feedbackRequestsFeedbackRequestNonceGet");
      }


      var pathParams = {
        'feedbackRequestNonce': feedbackRequestNonce
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = FeedbackRequest;

      return this.apiClient.callApi(
        '/feedback-requests/{feedbackRequestNonce}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the venuesVenueIdEventsGet operation.
     * @callback module:api/EventApi~venuesVenueIdEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all events for a venue sorted by venue relevance.
     * Get all events for an venue sorted by relevance. Only the events that have at least one active date in the period specified between date_from and date_to are returned. If date_from and date_to are not set then the period that will be set will be one year from the date of the request&#39;
     * @param {Number} venueId Venue identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.vertical Vertical identifier
     * @param {Number} opts.city City identifier
     * @param {Number} opts.category Category identifier
     * @param {Number} opts.editorialCategory Editorial category identifier
     * @param {String} opts.dateFrom Start date | Use format: YYYY-MM-DD
     * @param {String} opts.dateTo To date | Use format: YYYY-MM-DD
     * @param {Number} opts.offset Pagination offset (default to 0)
     * @param {Number} opts.limit Max number of items in the response (default to 10)
     * @param {module:model/String} opts.sortBy Sorting strategy (default to venue-relevance)
     * @param {module:api/EventApi~venuesVenueIdEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.venuesVenueIdEventsGet = function(venueId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'venueId' is set
      if (venueId == undefined || venueId == null) {
        throw new Error("Missing the required parameter 'venueId' when calling venuesVenueIdEventsGet");
      }


      var pathParams = {
        'venueId': venueId
      };
      var queryParams = {
        'vertical': opts['vertical'],
        'city': opts['city'],
        'category': opts['category'],
        'editorial-category': opts['editorialCategory'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'offset': opts['offset'],
        'limit': opts['limit'],
        'sort_by': opts['sortBy']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/venues/{venueId}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
