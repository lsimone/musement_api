/**
 * Musement API
 * Musmement API
 *
 * OpenAPI spec version: 3.2.0
 * Contact: api-support@musement.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Order', 'model/PostClientToken', 'model/ResponseWithMessage'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Order'), require('../model/PostClientToken'), require('../model/ResponseWithMessage'));
  } else {
    // Browser globals (root is window)
    if (!root.MusementApi) {
      root.MusementApi = {};
    }
    root.MusementApi.OrderApi = factory(root.MusementApi.ApiClient, root.MusementApi.Order, root.MusementApi.PostClientToken, root.MusementApi.ResponseWithMessage);
  }
}(this, function(ApiClient, Order, PostClientToken, ResponseWithMessage) {
  'use strict';

  /**
   * Order service.
   * @module api/OrderApi
   * @version 3.2.0
   */

  /**
   * Constructs a new OrderApi. 
   * @alias module:api/OrderApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the customersMeOrdersGet operation.
     * @callback module:api/OrderApi~customersMeOrdersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Order>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all orders for the user logged in
     * @param {module:api/OrderApi~customersMeOrdersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Order>}
     */
    this.customersMeOrdersGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [Order];

      return this.apiClient.callApi(
        '/customers/me/orders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customersMeOrdersOrderIdTicketsTicketIdGet operation.
     * @callback module:api/OrderApi~customersMeOrdersOrderIdTicketsTicketIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details for a specific ticket
     * @param {Number} orderId $order_id Order identifier
     * @param {Number} ticketId $ticket_id Ticket identifier
     * @param {module:api/OrderApi~customersMeOrdersOrderIdTicketsTicketIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.customersMeOrdersOrderIdTicketsTicketIdGet = function(orderId, ticketId, callback) {
      var postBody = null;

      // verify the required parameter 'orderId' is set
      if (orderId == undefined || orderId == null) {
        throw new Error("Missing the required parameter 'orderId' when calling customersMeOrdersOrderIdTicketsTicketIdGet");
      }

      // verify the required parameter 'ticketId' is set
      if (ticketId == undefined || ticketId == null) {
        throw new Error("Missing the required parameter 'ticketId' when calling customersMeOrdersOrderIdTicketsTicketIdGet");
      }


      var pathParams = {
        'order_id': orderId,
        'ticket_id': ticketId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/customers/me/orders/{order_id}/tickets/{ticket_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersOrderUuidGet operation.
     * @callback module:api/OrderApi~ordersOrderUuidGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Order} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details for an order
     * @param {String} orderUuid Order Uuid
     * @param {module:api/OrderApi~ordersOrderUuidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Order}
     */
    this.ordersOrderUuidGet = function(orderUuid, callback) {
      var postBody = null;

      // verify the required parameter 'orderUuid' is set
      if (orderUuid == undefined || orderUuid == null) {
        throw new Error("Missing the required parameter 'orderUuid' when calling ordersOrderUuidGet");
      }


      var pathParams = {
        'orderUuid': orderUuid
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Order;

      return this.apiClient.callApi(
        '/orders/{orderUuid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the ordersPost operation.
     * @callback module:api/OrderApi~ordersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an order
     * @param {Object} opts Optional parameters
     * @param {Number} opts.cartId 
     * @param {module:api/OrderApi~ordersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.ordersPost = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'cart_id': opts['cartId']
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/orders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsBraintreeTokenPost operation.
     * @callback module:api/OrderApi~paymentsBraintreeTokenPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PostClientToken} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Braintree clientToken
     * @param {module:api/OrderApi~paymentsBraintreeTokenPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PostClientToken}
     */
    this.paymentsBraintreeTokenPost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = PostClientToken;

      return this.apiClient.callApi(
        '/payments/braintree/token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsNoPaymentPost operation.
     * @callback module:api/OrderApi~paymentsNoPaymentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseWithMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply the no-payment strategy.
     * Apply the no-payment strategy for an order. You can use this strategy if the cart amount is zero or if you have the special &#x60;NoPaymentStrategy&#x60; grant
     * @param {module:api/OrderApi~paymentsNoPaymentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseWithMessage}
     */
    this.paymentsNoPaymentPost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = ResponseWithMessage;

      return this.apiClient.callApi(
        '/payments/no/payment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the paymentsStripeStoredSourceInfoGet operation.
     * @callback module:api/OrderApi~paymentsStripeStoredSourceInfoGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get stored Stripe Source info
     * @param {module:api/OrderApi~paymentsStripeStoredSourceInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.paymentsStripeStoredSourceInfoGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/payments/stripe/stored_source_info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
