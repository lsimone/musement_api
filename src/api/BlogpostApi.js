/**
 * Musement API
 * Musmement API
 *
 * OpenAPI spec version: 3.2.0
 * Contact: api-support@musement.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Blogpost', 'model/BlogpostCategory', 'model/BlogpostCategoryAggregated'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Blogpost'), require('../model/BlogpostCategory'), require('../model/BlogpostCategoryAggregated'));
  } else {
    // Browser globals (root is window)
    if (!root.MusementApi) {
      root.MusementApi = {};
    }
    root.MusementApi.BlogpostApi = factory(root.MusementApi.ApiClient, root.MusementApi.Blogpost, root.MusementApi.BlogpostCategory, root.MusementApi.BlogpostCategoryAggregated);
  }
}(this, function(ApiClient, Blogpost, BlogpostCategory, BlogpostCategoryAggregated) {
  'use strict';

  /**
   * Blogpost service.
   * @module api/BlogpostApi
   * @version 3.2.0
   */

  /**
   * Constructs a new BlogpostApi. 
   * @alias module:api/BlogpostApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the blogpostsCategoriesGet operation.
     * @callback module:api/BlogpostApi~blogpostsCategoriesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BlogpostCategoryAggregated>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all available blogpost categories
     * @param {module:api/BlogpostApi~blogpostsCategoriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BlogpostCategoryAggregated>}
     */
    this.blogpostsCategoriesGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [BlogpostCategoryAggregated];

      return this.apiClient.callApi(
        '/blogposts-categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the blogpostsCategoriesIdGet operation.
     * @callback module:api/BlogpostApi~blogpostsCategoriesIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BlogpostCategory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific blogpost category
     * @param {Number} id Category identifier
     * @param {module:api/BlogpostApi~blogpostsCategoriesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BlogpostCategory}
     */
    this.blogpostsCategoriesIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling blogpostsCategoriesIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = BlogpostCategory;

      return this.apiClient.callApi(
        '/blogposts-categories/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the blogpostsGet operation.
     * @callback module:api/BlogpostApi~blogpostsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Blogpost>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a blogposts
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Pagination offset (default to 0)
     * @param {Number} opts.limit Max number of items in the response (default to 10)
     * @param {String} opts.category Category code
     * @param {String} opts.city City identifier
     * @param {module:model/String} opts.sortBy Set sorting strategy (default to publish-date)
     * @param {module:api/BlogpostApi~blogpostsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Blogpost>}
     */
    this.blogpostsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit'],
        'category': opts['category'],
        'city': opts['city'],
        'sort_by': opts['sortBy']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [Blogpost];

      return this.apiClient.callApi(
        '/blogposts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the blogpostsIdGet operation.
     * @callback module:api/BlogpostApi~blogpostsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Blogpost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get blogpost by identifier
     * @param {String} id Blogpost unique identifier
     * @param {module:api/BlogpostApi~blogpostsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Blogpost}
     */
    this.blogpostsIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling blogpostsIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Blogpost;

      return this.apiClient.callApi(
        '/blogposts/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the blogpostsIdPositionGet operation.
     * @callback module:api/BlogpostApi~blogpostsIdPositionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Blogpost} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get previous o next blogposts
     * @param {String} id Blogpost unique identifier
     * @param {module:model/String} position Indicate if you want the prev or the next post
     * @param {module:api/BlogpostApi~blogpostsIdPositionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Blogpost}
     */
    this.blogpostsIdPositionGet = function(id, position, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling blogpostsIdPositionGet");
      }

      // verify the required parameter 'position' is set
      if (position == undefined || position == null) {
        throw new Error("Missing the required parameter 'position' when calling blogpostsIdPositionGet");
      }


      var pathParams = {
        'id': id,
        'position': position
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Blogpost;

      return this.apiClient.callApi(
        '/blogposts/{id}/{position}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the citiesCityIdBlogpostsGet operation.
     * @callback module:api/BlogpostApi~citiesCityIdBlogpostsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the blogposts for the city
     * @param {Number} cityId City identifier
     * @param {module:api/BlogpostApi~citiesCityIdBlogpostsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.citiesCityIdBlogpostsGet = function(cityId, callback) {
      var postBody = null;

      // verify the required parameter 'cityId' is set
      if (cityId == undefined || cityId == null) {
        throw new Error("Missing the required parameter 'cityId' when calling citiesCityIdBlogpostsGet");
      }


      var pathParams = {
        'cityId': cityId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/cities/{cityId}/blogposts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
