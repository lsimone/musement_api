/**
 * Musement API
 * Musmement API
 *
 * OpenAPI spec version: 3.2.0
 * Contact: api-support@musement.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/CityAggregated', 'model/Country', 'model/Event'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/CityAggregated'), require('../model/Country'), require('../model/Event'));
  } else {
    // Browser globals (root is window)
    if (!root.MusementApi) {
      root.MusementApi = {};
    }
    root.MusementApi.CountryApi = factory(root.MusementApi.ApiClient, root.MusementApi.CityAggregated, root.MusementApi.Country, root.MusementApi.Event);
  }
}(this, function(ApiClient, CityAggregated, Country, Event) {
  'use strict';

  /**
   * Country service.
   * @module api/CountryApi
   * @version 3.2.0
   */

  /**
   * Constructs a new CountryApi. 
   * @alias module:api/CountryApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the countriesCountryIdCitiesGet operation.
     * @callback module:api/CountryApi~countriesCountryIdCitiesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CityAggregated>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all cities for a country
     * @param {Number} countryId Country identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Pagination offset (default to 0)
     * @param {Number} opts.limit Max number of items in the response (default to 10)
     * @param {module:api/CountryApi~countriesCountryIdCitiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CityAggregated>}
     */
    this.countriesCountryIdCitiesGet = function(countryId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'countryId' is set
      if (countryId == undefined || countryId == null) {
        throw new Error("Missing the required parameter 'countryId' when calling countriesCountryIdCitiesGet");
      }


      var pathParams = {
        'countryId': countryId
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [CityAggregated];

      return this.apiClient.callApi(
        '/countries/{countryId}/cities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the countriesCountryIdEventsGet operation.
     * @callback module:api/CountryApi~countriesCountryIdEventsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all events for a country
     * Get all events for a country sorted by relevance. If priority_city is specified the event for that city are returned first&#39;
     * @param {Number} countryId Country identifier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.vertical Vertical identifier
     * @param {Number} opts.priorityCity Prioritize results that belong to this city
     * @param {Number} opts.offset Pagination offset (default to 0)
     * @param {Number} opts.limit Max number of items in the response (default to 10)
     * @param {module:api/CountryApi~countriesCountryIdEventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.countriesCountryIdEventsGet = function(countryId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'countryId' is set
      if (countryId == undefined || countryId == null) {
        throw new Error("Missing the required parameter 'countryId' when calling countriesCountryIdEventsGet");
      }


      var pathParams = {
        'countryId': countryId
      };
      var queryParams = {
        'vertical': opts['vertical'],
        'priority_city': opts['priorityCity'],
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/countries/{countryId}/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the countriesCountryIdGet operation.
     * @callback module:api/CountryApi~countriesCountryIdGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get country by unique identifier
     * @param {Number} countryId Country identifier
     * @param {module:api/CountryApi~countriesCountryIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.countriesCountryIdGet = function(countryId, callback) {
      var postBody = null;

      // verify the required parameter 'countryId' is set
      if (countryId == undefined || countryId == null) {
        throw new Error("Missing the required parameter 'countryId' when calling countriesCountryIdGet");
      }


      var pathParams = {
        'countryId': countryId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/countries/{countryId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the countriesGet operation.
     * @callback module:api/CountryApi~countriesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Country>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all countries
     * @param {module:api/CountryApi~countriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Country>}
     */
    this.countriesGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [Country];

      return this.apiClient.callApi(
        '/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
