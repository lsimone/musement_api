/**
 * Musement API
 * Musmement API
 *
 * OpenAPI spec version: 3.2.0
 * Contact: api-support@musement.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Cart', 'model/CartRequest', 'model/GiftCreationRequest', 'model/GiftRedeemRequest', 'model/ResponseWithMessage', 'model/Ticket'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Cart'), require('../model/CartRequest'), require('../model/GiftCreationRequest'), require('../model/GiftRedeemRequest'), require('../model/ResponseWithMessage'), require('../model/Ticket'));
  } else {
    // Browser globals (root is window)
    if (!root.MusementApi) {
      root.MusementApi = {};
    }
    root.MusementApi.CartApi = factory(root.MusementApi.ApiClient, root.MusementApi.Cart, root.MusementApi.CartRequest, root.MusementApi.GiftCreationRequest, root.MusementApi.GiftRedeemRequest, root.MusementApi.ResponseWithMessage, root.MusementApi.Ticket);
  }
}(this, function(ApiClient, Cart, CartRequest, GiftCreationRequest, GiftRedeemRequest, ResponseWithMessage, Ticket) {
  'use strict';

  /**
   * Cart service.
   * @module api/CartApi
   * @version 3.2.0
   */

  /**
   * Constructs a new CartApi. 
   * @alias module:api/CartApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the cartsCartIdDelete operation.
     * @callback module:api/CartApi~cartsCartIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a Cart
     * @param {Number} cartId Cart identifier
     * @param {module:api/CartApi~cartsCartIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.cartsCartIdDelete = function(cartId, callback) {
      var postBody = null;

      // verify the required parameter 'cartId' is set
      if (cartId == undefined || cartId == null) {
        throw new Error("Missing the required parameter 'cartId' when calling cartsCartIdDelete");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/carts/{cartId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cartsCartIdFormGet operation.
     * @callback module:api/CartApi~cartsCartIdFormGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the form associated to a cart
     * @param {Number} cartId Cart identifier
     * @param {module:api/CartApi~cartsCartIdFormGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.cartsCartIdFormGet = function(cartId, callback) {
      var postBody = null;

      // verify the required parameter 'cartId' is set
      if (cartId == undefined || cartId == null) {
        throw new Error("Missing the required parameter 'cartId' when calling cartsCartIdFormGet");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/carts/{cartId}/form', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cartsCartIdGet operation.
     * @callback module:api/CartApi~cartsCartIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cart} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a cart by unique identifier
     * @param {Number} cartId Cart identifier
     * @param {module:api/CartApi~cartsCartIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cart}
     */
    this.cartsCartIdGet = function(cartId, callback) {
      var postBody = null;

      // verify the required parameter 'cartId' is set
      if (cartId == undefined || cartId == null) {
        throw new Error("Missing the required parameter 'cartId' when calling cartsCartIdGet");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Cart;

      return this.apiClient.callApi(
        '/carts/{cartId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cartsCartIdGiftsGiftCodePut operation.
     * @callback module:api/CartApi~cartsCartIdGiftsGiftCodePutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseWithMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Redeem gift code with chosen date+time+language. Appropriate Tickets with price 0 will be added to Cart
     * @param {Number} cartId Cart Id
     * @param {String} giftCode Gift code
     * @param {module:model/GiftRedeemRequest} giftRedeemRequest Gift redeem request
     * @param {module:api/CartApi~cartsCartIdGiftsGiftCodePutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseWithMessage}
     */
    this.cartsCartIdGiftsGiftCodePut = function(cartId, giftCode, giftRedeemRequest, callback) {
      var postBody = giftRedeemRequest;

      // verify the required parameter 'cartId' is set
      if (cartId == undefined || cartId == null) {
        throw new Error("Missing the required parameter 'cartId' when calling cartsCartIdGiftsGiftCodePut");
      }

      // verify the required parameter 'giftCode' is set
      if (giftCode == undefined || giftCode == null) {
        throw new Error("Missing the required parameter 'giftCode' when calling cartsCartIdGiftsGiftCodePut");
      }

      // verify the required parameter 'giftRedeemRequest' is set
      if (giftRedeemRequest == undefined || giftRedeemRequest == null) {
        throw new Error("Missing the required parameter 'giftRedeemRequest' when calling cartsCartIdGiftsGiftCodePut");
      }


      var pathParams = {
        'cartId': cartId,
        'giftCode': giftCode
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = ResponseWithMessage;

      return this.apiClient.callApi(
        '/carts/{cartId}/gifts/{giftCode}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cartsCartIdGiftsPost operation.
     * @callback module:api/CartApi~cartsCartIdGiftsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResponseWithMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create tailored Gift and add it to Cart
     * @param {Number} cartId Cart Id
     * @param {module:model/GiftCreationRequest} giftCreationRequest Gift creation request
     * @param {module:api/CartApi~cartsCartIdGiftsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResponseWithMessage}
     */
    this.cartsCartIdGiftsPost = function(cartId, giftCreationRequest, callback) {
      var postBody = giftCreationRequest;

      // verify the required parameter 'cartId' is set
      if (cartId == undefined || cartId == null) {
        throw new Error("Missing the required parameter 'cartId' when calling cartsCartIdGiftsPost");
      }

      // verify the required parameter 'giftCreationRequest' is set
      if (giftCreationRequest == undefined || giftCreationRequest == null) {
        throw new Error("Missing the required parameter 'giftCreationRequest' when calling cartsCartIdGiftsPost");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = ResponseWithMessage;

      return this.apiClient.callApi(
        '/carts/{cartId}/gifts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cartsCartIdPatch operation.
     * @callback module:api/CartApi~cartsCartIdPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cart} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a Cart
     * @param {Number} cartId Cart identifier
     * @param {module:model/CartRequest} cart Cart request
     * @param {module:api/CartApi~cartsCartIdPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cart}
     */
    this.cartsCartIdPatch = function(cartId, cart, callback) {
      var postBody = cart;

      // verify the required parameter 'cartId' is set
      if (cartId == undefined || cartId == null) {
        throw new Error("Missing the required parameter 'cartId' when calling cartsCartIdPatch");
      }

      // verify the required parameter 'cart' is set
      if (cart == undefined || cart == null) {
        throw new Error("Missing the required parameter 'cart' when calling cartsCartIdPatch");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Cart;

      return this.apiClient.callApi(
        '/carts/{cartId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cartsCartIdPut operation.
     * @callback module:api/CartApi~cartsCartIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cart} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replace a Cart
     * @param {Number} cartId Cart identifier
     * @param {module:model/CartRequest} cart Cart request
     * @param {module:api/CartApi~cartsCartIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cart}
     */
    this.cartsCartIdPut = function(cartId, cart, callback) {
      var postBody = cart;

      // verify the required parameter 'cartId' is set
      if (cartId == undefined || cartId == null) {
        throw new Error("Missing the required parameter 'cartId' when calling cartsCartIdPut");
      }

      // verify the required parameter 'cart' is set
      if (cart == undefined || cart == null) {
        throw new Error("Missing the required parameter 'cart' when calling cartsCartIdPut");
      }


      var pathParams = {
        'cartId': cartId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Cart;

      return this.apiClient.callApi(
        '/carts/{cartId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cartsIdTicketsPost operation.
     * @callback module:api/CartApi~cartsIdTicketsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cart} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add tickets to a cart
     * @param {Number} id Cart Id
     * @param {module:api/CartApi~cartsIdTicketsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cart}
     */
    this.cartsIdTicketsPost = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling cartsIdTicketsPost");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Cart;

      return this.apiClient.callApi(
        '/carts/{id}/tickets', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cartsIdTicketsTicketIdDelete operation.
     * @callback module:api/CartApi~cartsIdTicketsTicketIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Ticket} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a ticket by ID
     * @param {Number} id Cart Id
     * @param {Number} ticketId Ticket Id
     * @param {module:api/CartApi~cartsIdTicketsTicketIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Ticket}
     */
    this.cartsIdTicketsTicketIdDelete = function(id, ticketId, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling cartsIdTicketsTicketIdDelete");
      }

      // verify the required parameter 'ticketId' is set
      if (ticketId == undefined || ticketId == null) {
        throw new Error("Missing the required parameter 'ticketId' when calling cartsIdTicketsTicketIdDelete");
      }


      var pathParams = {
        'id': id,
        'ticketId': ticketId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Ticket;

      return this.apiClient.callApi(
        '/carts/{id}/tickets/{ticketId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cartsPost operation.
     * @callback module:api/CartApi~cartsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Cart} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a cart
     * @param {module:model/CartRequest} cart Cart request
     * @param {module:api/CartApi~cartsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Cart}
     */
    this.cartsPost = function(cart, callback) {
      var postBody = cart;

      // verify the required parameter 'cart' is set
      if (cart == undefined || cart == null) {
        throw new Error("Missing the required parameter 'cart' when calling cartsPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Cart;

      return this.apiClient.callApi(
        '/carts', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
