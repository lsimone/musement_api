/**
 * Musement API
 * Musmement API
 *
 * OpenAPI spec version: 3.2.0
 * Contact: api-support@musement.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ContentManager', 'model/Customer', 'model/Event', 'model/Supplier', 'model/TranslatedMetadata'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ContentManager'), require('../model/Customer'), require('../model/Event'), require('../model/Supplier'), require('../model/TranslatedMetadata'));
  } else {
    // Browser globals (root is window)
    if (!root.MusementApi) {
      root.MusementApi = {};
    }
    root.MusementApi.SecurityApi = factory(root.MusementApi.ApiClient, root.MusementApi.ContentManager, root.MusementApi.Customer, root.MusementApi.Event, root.MusementApi.Supplier, root.MusementApi.TranslatedMetadata);
  }
}(this, function(ApiClient, ContentManager, Customer, Event, Supplier, TranslatedMetadata) {
  'use strict';

  /**
   * Security service.
   * @module api/SecurityApi
   * @version 3.2.0
   */

  /**
   * Constructs a new SecurityApi. 
   * @alias module:api/SecurityApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the contentManagersMeGet operation.
     * @callback module:api/SecurityApi~contentManagersMeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentManager} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get logged content manager data
     * @param {module:api/SecurityApi~contentManagersMeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentManager}
     */
    this.contentManagersMeGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = ContentManager;

      return this.apiClient.callApi(
        '/content-managers/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the customersMeGet operation.
     * @callback module:api/SecurityApi~customersMeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Customer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get logged user data
     * @param {module:api/SecurityApi~customersMeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Customer}
     */
    this.customersMeGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Customer;

      return this.apiClient.callApi(
        '/customers/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loginGet operation.
     * @callback module:api/SecurityApi~loginGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Login a user via OAuth 2
     * @param {module:api/SecurityApi~loginGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.loginGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the refreshGet operation.
     * @callback module:api/SecurityApi~refreshGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a fresh access token
     * @param {module:api/SecurityApi~refreshGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.refreshGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/refresh', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resetPasswordPost operation.
     * @callback module:api/SecurityApi~resetPasswordPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Send reset password email. This method always returns 204
     * @param {String} email Email address of the user
     * @param {module:api/SecurityApi~resetPasswordPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.resetPasswordPost = function(email, callback) {
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email == undefined || email == null) {
        throw new Error("Missing the required parameter 'email' when calling resetPasswordPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'email': email
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/reset_password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the signupExternalProviderPost operation.
     * @callback module:api/SecurityApi~signupExternalProviderPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Customer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a new customer using external provider data
     * @param {module:api/SecurityApi~signupExternalProviderPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Customer}
     */
    this.signupExternalProviderPost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Customer;

      return this.apiClient.callApi(
        '/signup/external_provider', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the signupPost operation.
     * @callback module:api/SecurityApi~signupPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Begin a new signup process
     * @param {module:api/SecurityApi~signupPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.signupPost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/signup', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the signupSoftPost operation.
     * @callback module:api/SecurityApi~signupSoftPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a new customer setting the softpassword
     * @param {module:api/SecurityApi~signupSoftPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.signupSoftPost = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/signup/soft', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersMeActivitiesGet operation.
     * @callback module:api/SecurityApi~suppliersMeActivitiesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Event>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get activities for the logged in supplier
     * @param {Object} opts Optional parameters
     * @param {Number} opts.offset Pagination offset (default to 0)
     * @param {Number} opts.limit Max number of items in the response (default to 10)
     * @param {module:api/SecurityApi~suppliersMeActivitiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Event>}
     */
    this.suppliersMeActivitiesGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [Event];

      return this.apiClient.callApi(
        '/suppliers/me/activities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersMeGet operation.
     * @callback module:api/SecurityApi~suppliersMeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Supplier} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get logged supplier data
     * @param {module:api/SecurityApi~suppliersMeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Supplier}
     */
    this.suppliersMeGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = Supplier;

      return this.apiClient.callApi(
        '/suppliers/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersMePriceFeaturesGet operation.
     * @callback module:api/SecurityApi~suppliersMePriceFeaturesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TranslatedMetadata>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all available price features for the logged in supplier
     * @param {module:api/SecurityApi~suppliersMePriceFeaturesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TranslatedMetadata>}
     */
    this.suppliersMePriceFeaturesGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [TranslatedMetadata];

      return this.apiClient.callApi(
        '/suppliers/me/price-features', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the suppliersMeTicketHoldersGet operation.
     * @callback module:api/SecurityApi~suppliersMeTicketHoldersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TranslatedMetadata>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all available ticket holders features for the logged in supplier
     * @param {module:api/SecurityApi~suppliersMeTicketHoldersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TranslatedMetadata>}
     */
    this.suppliersMeTicketHoldersGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [TranslatedMetadata];

      return this.apiClient.callApi(
        '/suppliers/me/ticket-holders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
