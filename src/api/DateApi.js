/**
 * Musement API
 * Musmement API
 *
 * OpenAPI spec version: 3.2.0
 * Contact: api-support@musement.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GiftSchedule', 'model/ModelDate', 'model/Schedule'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GiftSchedule'), require('../model/ModelDate'), require('../model/Schedule'));
  } else {
    // Browser globals (root is window)
    if (!root.MusementApi) {
      root.MusementApi = {};
    }
    root.MusementApi.DateApi = factory(root.MusementApi.ApiClient, root.MusementApi.GiftSchedule, root.MusementApi.ModelDate, root.MusementApi.Schedule);
  }
}(this, function(ApiClient, GiftSchedule, ModelDate, Schedule) {
  'use strict';

  /**
   * Date service.
   * @module api/DateApi
   * @version 3.2.0
   */

  /**
   * Constructs a new DateApi. 
   * @alias module:api/DateApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the eventsEventIdDatesGet operation.
     * @callback module:api/DateApi~eventsEventIdDatesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ModelDate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available dates for an event
     * @param {Number} eventId Event identifier
     * @param {Object} opts Optional parameters
     * @param {String} opts.dateFrom Start date | If not specified set to today | Use format: YYYY-MM-DD
     * @param {String} opts.dateTo To date | If not specified set to next year | Use format: YYYY-MM-DD
     * @param {module:api/DateApi~eventsEventIdDatesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ModelDate}
     */
    this.eventsEventIdDatesGet = function(eventId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventsEventIdDatesGet");
      }


      var pathParams = {
        'eventId': eventId
      };
      var queryParams = {
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = ModelDate;

      return this.apiClient.callApi(
        '/events/{eventId}/dates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsEventIdGiftScheduleGet operation.
     * @callback module:api/DateApi~eventsEventIdGiftScheduleGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GiftSchedule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get schedule for a &#39;Gift creation&#39; for an Event
     * @param {Number} eventId Event identifier
     * @param {module:api/DateApi~eventsEventIdGiftScheduleGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GiftSchedule}
     */
    this.eventsEventIdGiftScheduleGet = function(eventId, callback) {
      var postBody = null;

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventsEventIdGiftScheduleGet");
      }


      var pathParams = {
        'eventId': eventId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = GiftSchedule;

      return this.apiClient.callApi(
        '/events/{eventId}/gift-schedule', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsEventIdScheduleDayGet operation.
     * @callback module:api/DateApi~eventsEventIdScheduleDayGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Schedule>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get schedule for a day for an event
     * @param {Number} eventId Event identifier
     * @param {String} day Day | Use format: YYYY-MM-DD
     * @param {Object} opts Optional parameters
     * @param {String} opts.ticketsNumber Number of ticket requested tickets |Only useful for real time events
     * @param {module:api/DateApi~eventsEventIdScheduleDayGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Schedule>}
     */
    this.eventsEventIdScheduleDayGet = function(eventId, day, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventsEventIdScheduleDayGet");
      }

      // verify the required parameter 'day' is set
      if (day == undefined || day == null) {
        throw new Error("Missing the required parameter 'day' when calling eventsEventIdScheduleDayGet");
      }


      var pathParams = {
        'eventId': eventId,
        'day': day
      };
      var queryParams = {
        'ticketsNumber': opts['ticketsNumber']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [Schedule];

      return this.apiClient.callApi(
        '/events/{eventId}/schedule/{day}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsEventIdScheduleDayGiftCodeGet operation.
     * @callback module:api/DateApi~eventsEventIdScheduleDayGiftCodeGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Schedule>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get schedule for Gift and specific day
     * @param {Number} eventId Event identifier
     * @param {String} day Day | Use format: YYYY-MM-DD
     * @param {String} giftCode Gift code
     * @param {module:api/DateApi~eventsEventIdScheduleDayGiftCodeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Schedule>}
     */
    this.eventsEventIdScheduleDayGiftCodeGet = function(eventId, day, giftCode, callback) {
      var postBody = null;

      // verify the required parameter 'eventId' is set
      if (eventId == undefined || eventId == null) {
        throw new Error("Missing the required parameter 'eventId' when calling eventsEventIdScheduleDayGiftCodeGet");
      }

      // verify the required parameter 'day' is set
      if (day == undefined || day == null) {
        throw new Error("Missing the required parameter 'day' when calling eventsEventIdScheduleDayGiftCodeGet");
      }

      // verify the required parameter 'giftCode' is set
      if (giftCode == undefined || giftCode == null) {
        throw new Error("Missing the required parameter 'giftCode' when calling eventsEventIdScheduleDayGiftCodeGet");
      }


      var pathParams = {
        'eventId': eventId,
        'day': day,
        'giftCode': giftCode
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/xml', 'application/json'];
      var accepts = ['application/xml', 'application/json'];
      var returnType = [Schedule];

      return this.apiClient.callApi(
        '/events/{eventId}/schedule/{day}/{giftCode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
